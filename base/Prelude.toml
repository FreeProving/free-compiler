# This configuration file contains the names of predefined types, constructors
# and functions from the Coq Base library and the corresponding Haskell names
# and types.

##############################################################################
# Metadata                                                                   #
##############################################################################

version = 4
module-name = 'Prelude'
library-name = 'Base'
exported-types = [
    'Prelude.Bool',
    'Prelude.Integer',
    'Prelude.([])',
    'Prelude.(,)',
    'Prelude.()',
  ]
exported-values = [
    # Bool
    'Prelude.True',
    'Prelude.False',
    'Prelude.(&&)',
    'Prelude.(||)',
    # Integer
    'Prelude.(+)',
    'Prelude.(-)',
    'Prelude.(*)',
    'Prelude.(^)',
    'Prelude.(<=)',
    'Prelude.(<)',
    'Prelude.(==)',
    'Prelude.(/=)',
    'Prelude.(>=)',
    'Prelude.(>)',
    'Prelude.negate',
    # Lists
    'Prelude.([])',
    'Prelude.(:)',
    # Pairs
    'Prelude.(,)',
    # Unit
    'Prelude.()',
  ]

##############################################################################
# Bool                                                                       #
##############################################################################

[[types]]
  haskell-name = 'Prelude.Bool'
  coq-name     = 'Bool'
  agda-name    = 'ùîπ'
  arity        = 0
  cons-names   = [
      'Prelude.True',
      'Prelude.False',
    ]

[[constructors]]
  haskell-type    = 'Prelude.Bool'
  haskell-name    = 'Prelude.True'
  coq-name        = 'true'
  coq-smart-name  = 'True_'
  agda-name       = 'true'
  agda-smart-name = 'True'
  arity           = 0

[[constructors]]
  haskell-type    = 'Prelude.Bool'
  haskell-name    = 'Prelude.False'
  coq-name        = 'false'
  coq-smart-name  = 'False_'
  agda-name       = 'false'
  agda-smart-name = 'False'
  arity           = 0

[[functions]]
  haskell-type    = 'Prelude.Bool -> Prelude.Bool -> Prelude.Bool'
  haskell-name    = 'Prelude.(&&)'
  coq-name        = 'andBool'
  agda-name       = '_‚àß_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Bool -> Prelude.Bool -> Prelude.Bool'
  haskell-name    = 'Prelude.(||)'
  coq-name        = 'orBool'
  agda-name       = '_‚à®_'
  arity           = 2
  effects         = []
  needs-free-args = true

##############################################################################
# Integer                                                                    #
##############################################################################

[[types]]
  haskell-name = 'Prelude.Integer'
  coq-name     = 'Integer'
  agda-name    = '‚Ñ§'
  arity        = 0
  cons-names   = []

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Integer'
  haskell-name    = 'Prelude.(+)'
  coq-name        = 'addInteger'
  agda-name       = '_+_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Integer'
  haskell-name    = 'Prelude.(-)'
  coq-name        = 'subInteger'
  agda-name       = '_-_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Integer'
  haskell-name    = 'Prelude.(*)'
  coq-name        = 'mulInteger'
  agda-name       = '_*_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Integer'
  haskell-name    = 'Prelude.(^)'
  coq-name        = 'powInteger'
  agda-name       = '_^_'
  arity           = 2
  effects         = ['Partiality']
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Bool'
  haskell-name    = 'Prelude.(<=)'
  coq-name        = 'leInteger'
  agda-name       = '_‚â§_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Bool'
  haskell-name    = 'Prelude.(<)'
  coq-name        = 'ltInteger'
  agda-name       = '_<_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Bool'
  haskell-name    = 'Prelude.(==)'
  coq-name        = 'eqInteger'
  agda-name       = '_‚âü_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Bool'
  haskell-name    = 'Prelude.(/=)'
  coq-name        = 'neqInteger'
  agda-name       = '_‚â†_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Bool'
  haskell-name    = 'Prelude.(>=)'
  coq-name        = 'geInteger'
  agda-name       = '_‚â•_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer -> Prelude.Bool'
  haskell-name    = 'Prelude.(>)'
  coq-name        = 'gtInteger'
  agda-name       = '_>_'
  arity           = 2
  effects         = []
  needs-free-args = true

[[functions]]
  haskell-type    = 'Prelude.Integer -> Prelude.Integer'
  haskell-name    = 'Prelude.negate'
  coq-name        = 'negate'
  agda-name       = 'neg'
  arity           = 1
  effects         = []
  needs-free-args = true

##############################################################################
# Lists                                                                      #
##############################################################################

[[types]]
  haskell-name = 'Prelude.([])'
  coq-name     = 'List'
  agda-name    = 'List'
  arity        = 1
  cons-names   = [
      'Prelude.([])',
      'Prelude.(:)',
    ]

[[constructors]]
  haskell-type    = 'Prelude.([]) a'
  haskell-name    = 'Prelude.([])'
  coq-name        = 'nil'
  agda-name       = 'nil'
  coq-smart-name  = 'Nil'
  agda-smart-name = 'Nil'
  arity           = 0

[[constructors]]
  haskell-type    = 'a -> Prelude.([]) a -> Prelude.([]) a'
  haskell-name    = 'Prelude.(:)'
  coq-name        = 'cons'
  agda-name       = 'cons'
  coq-smart-name  = 'Cons'
  agda-smart-name = 'Cons'
  arity           = 2

##############################################################################
# Pairs                                                                      #
##############################################################################

[[types]]
  haskell-name = 'Prelude.(,)'
  coq-name     = 'Pair'
  agda-name    = 'Pair'
  arity        = 2
  cons-names   = ['Prelude.(,)']

[[constructors]]
  haskell-type    = 'a -> b -> Prelude.(,) a b'
  haskell-name    = 'Prelude.(,)'
  coq-name        = 'pair_'
  agda-name       = 'pair'
  coq-smart-name  = 'Pair_'
  agda-smart-name = 'Pair‚Ä≤'
  arity           = 2

##############################################################################
# Unit                                                                       #
##############################################################################

[[types]]
  haskell-name = 'Prelude.()'
  coq-name     = 'Unit'
  agda-name    = '‚ä§'
  arity        = 0
  cons-names   = ['Prelude.()']

[[constructors]]
  haskell-type    = 'Prelude.()'
  haskell-name    = 'Prelude.()'
  coq-name        = 'tt'
  agda-name       = 'tt'
  coq-smart-name  = 'Tt'
  agda-smart-name = 'Tt'
  arity           = 0
