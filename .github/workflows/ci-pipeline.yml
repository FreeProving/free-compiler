name: CI Pipeline

# The CI pipeline runs under the following criteria.
#   - On every push that modifies Cabal configuration, source or example files.
#     If just the README or documentation changes, the pipeline does not have
#     to run. It also runs when the Workflow configuration changed itself.
#   - On every pull request regardless of which files have been changed.
on:
  push:
    paths:
    - 'cabal.project'
    - 'free-compiler.cabal'
    - 'base/**'
    - 'example/**'
    - 'src/**'
    - '.github/workflows/ci-pipeline.yml'
  pull_request: {}

jobs:
  #############################################################################
  # Dependencies                                                              #
  #############################################################################

  # Installs Cabal dependencies and caches the directories where cabal
  # installs the dependencies. Unfortunately, the entire code of this job
  # needs to be replicated to restore the caches in jobs that use Cabal.
  #
  # We cache `~/.cabal/packages`, `~/.cabal/store` and `dist-newstyle`
  # separately. The cache keys contain the hash of the `.cabal` and
  # `cabal.project` file as well as the hash of the `01-index.cache` file
  # from `~/.cabal/packages`.
  #
  #   * If the Cabal files in this repository change, a previous version
  #     of the cache is restored and the updated dependencies are installed.
  #     We assume this to happen only infrequently.
  #
  #   * Before the caches are populated, the latest Cabal package list is
  #     downloaded. Therefore, a change of `01-index.cache` occurs frequently.
  #     Whenever the package list is updated, a lot of dependencies have
  #     to be rebuild. If the hash of the index wouldn't be part of the
  #     cache keys, the rebuild would be triggered on every push until the
  #     Cabal files are changed. By including the indexes hash, the rebuilt
  #     dependencies are cached until the next change of the package list.
  #
  # We install dependencies on all supported platforms separately. The
  # operating system is part of the cache key. Caches are never restored
  # from other platforms.
  install-dependencies:
    name: Install dependencies
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-packages-
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-dist-newstyle-
    - name: Install dependencies
      run: |
        cabal new-build freec-unit-tests --only-dependencies
        cabal new-build freec --only-dependencies

  #############################################################################
  # Unit tests                                                                #
  #############################################################################

  # Run the unit tests against all supported platforms.
  unit-tests:
    name: Unit tests
    needs: [install-dependencies]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-packages
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-dist-newstyle-
    - name: Install dependencies
      run: |
        cabal new-build freec-unit-tests --only-dependencies
        cabal new-build freec --only-dependencies
    - name: Build unit tests
      run: cabal new-build freec-unit-tests
    - name: Run unit tests
      run: cabal new-run freec-unit-tests

  #############################################################################
  # Executable                                                                #
  #############################################################################

  # Builds the compiler executable on all supported platforms.
  build-compiler:
    name: Build compiler
    needs: [install-dependencies]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          cabal-packages-
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          dist-newstyle-
    - name: Install dependencies
      run: |
        cabal new-build freec-unit-tests --only-dependencies
        cabal new-build freec --only-dependencies
    - name: Build compiler
      run: cabal new-build freec
    - name: Copy executable to build directory
      run: |
        mkdir -p ./build/bin
        cp $(find dist-newstyle -name freec -type f) ./build/bin/freec
    - name: Upload executable
      uses: actions/upload-artifact@v1
      with:
        name: compiler-${{ matrix.os }}
        path: ./build/bin/freec

  #############################################################################
  # Documentation                                                             #
  #############################################################################

  # We build the documentation on Ubuntu only. Haddock should generate
  # the same documentation on all platforms and we need just one version
  # of the documentation for deployment in `deploy-docs`.
  build-docs:
    name: Build Haddock documentation
    needs: [install-dependencies]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-packages-
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-dist-newstyle-
    - name: Install dependencies
      run: |
        cabal new-build freec-unit-tests --only-dependencies
        cabal new-build freec --only-dependencies
    - name: Run Haddock
      run: ./tool/make-docs.sh
    - name: Copy documentation to build directory
      run: |
        mkdir -p ./build/docs
        cp -R $(find dist-newstyle -path "*doc/html/free-compiler") ./build/docs
    - name: Upload documentation
      uses: actions/upload-artifact@v1
      with:
        name: documentation
        path: ./build/docs

  # This job deploys the Haddock documentation generated by the `build-docs`
  # job to GitHub pages.
  #
  # This job requires a SSH deploy key for the repository. The following
  # command can be used to generate such a key.
  #
  #     ssh-keygen -t rsa -b 4096 -C "<email>" -N ""
  #
  #  - The **public key** must be given write access in the repositories deploy
  #    key menu under `Settings > Deploy Keys`.
  #
  #  - The **private key** must be added as a repository secret `DEPLOY_KEY` to
  #    the menu under `Settings > Secrets`.
  #
  # This job will be skipped if the `DEPLOY_KEY` secret is missing.
  # Therefore, it is not necessary to setup deployment to GitHub pages
  # when forking the repository.
  #
  # **NEVER** commit the contents of the private key!
  deploy-docs:
    name: Deploy Haddock documentation to GitHub pages
    needs: [build-docs]
    runs-on: ubuntu-latest
    env:
      # We cannot access `secrets` in `jobs.<job_id>.steps.if` directly and
      # `env` is not allowed on `jobs.<job_id>.if`.
      HAS_DEPLOY_KEY: ${{ secrets.DEPLOY_KEY != '' }}
    steps:
    - if: ${{ env.HAS_DEPLOY_KEY == 1 }}
      name: Checkout
      uses: actions/checkout@v1
    - if:   ${{ env.HAS_DEPLOY_KEY == 1 }}
      name: Install SSH Client
      uses: webfactory/ssh-agent@v0.2.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}
    - if:   ${{ env.HAS_DEPLOY_KEY == 1 }}
      name: Slug GitHub variables
      uses: rlespinasse/github-slug-action@master
    - if:   ${{ env.HAS_DEPLOY_KEY == 1 }}
      name: Download documentation
      uses: actions/download-artifact@v1
      with:
        name: documentation
        path: ./build/docs
    - if:   ${{ env.HAS_DEPLOY_KEY == 1 }}
      name: Deploy to GitHub pages
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        SSH: true
        BRANCH: gh-pages
        FOLDER: build/docs
        TARGET_FOLDER: docs/${{ env.GITHUB_REF_SLUG }}

  #############################################################################
  # Base library                                                              #
  #############################################################################

  # Build the base library of the compiler with all supported Coq versions.
  # We are using Ubuntu and a Debian based Coq docker image in this Job.
  build-base-library:
    name: Build Coq base library
    runs-on: ubuntu-latest
    container: coqorg/coq:${{ matrix.coq }}
    strategy:
      matrix:
        coq: ["8.8", "8.9", "8.10", "8.11"]
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Fix file permissions
      run: sudo chown -R coq:coq .
    - name: Setup Coq
      run: echo "::add-path::/home/coq/.opam/$COMPILER/bin"
    - name: Build Coq base library
      run: ./tool/compile-coq.sh base
    - name: Copy compiled base library to build directory
      run: |
        mkdir -p ./build/base
        cp --parents $(find base -name "*.vo" -or -name "*.glob") ./build
    - name: Upload compiled base library for Coq ${{ matrix.coq }}
      uses: actions/upload-artifact@v1
      with:
        name: coq-${{ matrix.coq }}-base-library
        path: ./build/base

  #############################################################################
  # Examples                                                                  #
  #############################################################################

  # Uses the compiler build by `build-compiler` to compile example Haskell
  # programs located in the `./example` directory.
  test-examples:
    name: Test examples
    needs: [build-compiler]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Download compiler
      uses: actions/download-artifact@v1
      with:
        name: compiler-${{ matrix.os }}
        path: ./
    - name: Mark compiler as executable
      run: chmod +x freec
    - name: Compile examples
      run: |
        ./freec                                          \
          --transform-pattern-matching                   \
          --dump-transformed-modules example/transformed \
          -b ./base                                      \
          -o ./example/generated                         \
          $(find ./example -name "*.hs")
    - name: Copy compiled examples to build directory
      run: |
        mkdir -p ./build/examples
        cp -R ./example/generated ./build/examples
        cp -R ./example/transformed ./build/examples
    - name: Upload compiled examples
      uses: actions/upload-artifact@v1
      with:
        name: examples
        path: ./build/examples

  # Tests whether Coq accepts the code generated by the compiler for the
  # examples in `test-examples`.
  # We are using Ubuntu and a Debian based Coq docker image in this Job.
  test-generated-code:
    name: Test generated Coq code
    needs: [test-examples, build-base-library]
    runs-on: ubuntu-latest
    container: coqorg/coq:${{ matrix.coq }}
    strategy:
      matrix:
        coq: ["8.8", "8.9", "8.10", "8.11"]
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Download base library for Coq ${{ matrix.coq }}
      uses: actions/download-artifact@v1
      with:
        name: coq-${{ matrix.coq }}-base-library
        path: ./base
    - name: Download compiled examples
      uses: actions/download-artifact@v1
      with:
        name: examples
        path: ./example
    - name: Fix file permissions
      run: sudo chown -R coq:coq .
    - name: Setup Coq
      run: echo "::add-path::/home/coq/.opam/$COMPILER/bin"
    - name: Compile (generated) Coq code
      run: ./tool/compile-coq.sh ./example

  #############################################################################
  # Code style                                                                #
  #############################################################################

  # All HLint suggestions should be followed or explicitly ignored
  # in `.hlint.yaml`.
  hlint:
    name: Run HLint
    runs-on: ubuntu-latest
    env:
      HLINT_URL: https://raw.github.com/ndmitchell/hlint/v2.2.11/misc/run.sh
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Check code style using HLint
      run: curl -sSL "$HLINT_URL" | sh -s src

  # All Haskell source files should be formatted using Brittany.
  brittany:
    name: Run Brittany
    runs-on: ubuntu-latest
    container: just95/brittany:0.12.1.1
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Check code style using Brittany
      run: ./tool/check-formatting.sh
