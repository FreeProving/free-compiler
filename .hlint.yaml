# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# Record patterns and sections don't improve the readability of the code
# necessarily.
- ignore: {name: "Use record patterns"}
- ignore: {name: "Use section"}

# HLint's suggestions for reducing code duplication turn out not be be very
# useful.
- ignore: {name: "Reduce duplication"}

# When reporting errors and in the test suite we are using `$` and `do`
# format code correctly.
- ignore: {name: "Redundant $"}
- ignore: {name: "Redundant do"}

# We don't use the `LambdaCase` and `TupleSections` language extensions as they
# do not work with our code formatter at the moment.
- ignore: {name: "Use lambda-case"}
- ignore: {name: "Use tuple-section"}

# Aliases for qualified imports.
- modules:
  - {name: [ FreeC.Backend.Agda.Base ], as: Agda.Base}
  - {name: [ FreeC.Backend.Agda.Syntax ], as: Agda}
  - {name: [ FreeC.Backend.Coq.Base ], as: Coq.Base}
  - {name: [ FreeC.Backend.Coq.Syntax ], as: Coq}
  - {name: [ FreeC.IR.Syntax ], as: IR}
  - {name: [ FreeC.IR.Base.Prelude ], as: IR.Prelude}
  - {name: [ FreeC.IR.Base.Test.QuickCheck], as: IR.Test.QuickCheck}
  - {name: [ FreeC.LiftedIR.Effect], as: Effect}
  - {name: [ FreeC.LiftedIR.Syntax], as: LIR}
  - {name: [ Data.Aeson ], as: Aeson}
  - {name: [ Data.ByteString.Lazy ], as: LazyByteString}
  - {name: [ Data.List.NonEmpty ], as: NonEmpty}
  - {name: [ Data.Map.Strict ], as: Map}
  - {name: [ Data.Set ], as: Set}
  - {name: [ Data.Set.Ordered ], as: OSet}
  - {name: [ Data.Text ], as: Text}
  - {name: [ Data.Text.Lazy ], as: LazyText}
  - {name: [ Data.Vector ], as: Vector}
  - {name: [ Language.Haskell.Exts.Syntax
           , Language.Haskell.Exts.Pretty
           , Language.Haskell.Exts.SrcLoc ], as: HSE}
  - {name: [ Text.Parsec.Error
           , Text.Parsec.Pos ], as: Parsec}
  - {name: [ Text.Toml.Types ], as: Toml}
