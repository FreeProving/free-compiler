-- | This module contains the definition of a monad that is used by the
--   compiler to report error messages, warnings and hints to the user
--   without throwing an exception or performing IO actions.
--
--   During execution the 'Reporter' monad collects all reported messages
--   internally. Additionally the monad holds the result of the computation.
--   The computation can be interrupted without returning a result by reporting
--   a fatal error message.
--
--   This module also provides functions for pretty printing the collected
--   error messages in a similar way to how the GHC prints error messages.
--   Because this requires us to know the source code that corresponds to
--   line numbers there are functions to attach source code to the source
--   spans generated by the @haskell-src-exts@ parser (See 'SrcSpanConverter').

module Compiler.Reporter
  ( Message(..)
  , SrcSpan
  , Reporter
  , Severity(..)
  , SrcSpanConverter(..)
  , addMessages
  , foldReporter
  , isFatal
  , messages
  , report
  , reportFatal
  , reportIOErrors
  , reportIOError
  )
where

import           Control.Monad                  ( liftM
                                                , ap
                                                , join
                                                )
import           Data.Maybe                     ( maybe )
import           System.IO.Error                ( catchIOError
                                                , ioeGetErrorString
                                                , ioeGetFileName
                                                )

import qualified Language.Haskell.Exts.SrcLoc  as H
import           Text.PrettyPrint.Leijen.Text

import           Compiler.Pretty

-------------------------------------------------------------------------------
-- Messages                                                                  --
-------------------------------------------------------------------------------

-- | The severity of a message reported by the compiler.
data Severity = Error | Warning | Info

-- | A message reported by the compiler.
data Message = Message (Maybe SrcSpan) Severity String

-------------------------------------------------------------------------------
-- Source spans                                                              --
-------------------------------------------------------------------------------

-- | Describes the portion of the source code that caused a message to be
--   reported.
--
--   In contrast to the source spans provided by the @haskell-src-exts@ package
--   this source span provides access to the line of code that contains the
--   source span. This source span does not support source spans that span
--   multiple lines.
data SrcSpan = SrcSpan
  { srcSpanFilename    :: String
  , srcSpanStartLine   :: Int
  , srcSpanStartColumn :: Int
  , srcSpanWidth       :: Int
  , srcSpanCodeLine    :: Maybe String
  }
  deriving (Show)

-- | Type class for @haskell-src-exts@ source spans that can be converted
--   to 'SrcSpan's for pretty printing of messages.
class SrcSpanConverter ss where
  -- | Converts a @haskell-src-exts@ source span to a 'SrcSpan' by
  --   attaching the corresponding line of source code.
  convertSrcSpan ::
    [(String, [String])] -- ^ A map of file names to lines of source code.
    -> ss                -- ^ The original source span to convert.
    -> SrcSpan

-- | Directly converts a 'H.SrcSpan' to a 'SrcSpan' by looking up
--   the corresponding line of code in the provided map.
instance SrcSpanConverter H.SrcSpan where
  convertSrcSpan codeByFilename srcSpan = SrcSpan
    { srcSpanFilename    = H.srcSpanFilename srcSpan
    , srcSpanStartLine   = H.srcSpanStartLine srcSpan
    , srcSpanStartColumn = H.srcSpanStartColumn srcSpan
    , srcSpanWidth       = max 1 (snd (H.spanSize srcSpan))
    , srcSpanCodeLine    =
        lookup (H.srcSpanFilename srcSpan) codeByFilename
          >>= (nth (H.srcSpanStartLine srcSpan - 1))
    }
   where
    -- | Gets @n@-th element of a list or 'Nothing' if there is no such element.
    --
    -- TODO Create a module for utility functions like this?
    nth :: Int -> [a] -> Maybe a
    nth _ [] = Nothing
    nth n (x : xs) | n <= 0    = Just x
                   | otherwise = nth (n - 1) xs

-- | Converts a 'H.SrcSpanInfo' by removing additional information and applying
--   the conversion for 'H.SrcSpan's.
instance SrcSpanConverter H.SrcSpanInfo where
  convertSrcSpan codeByFilename = convertSrcSpan codeByFilename . H.srcInfoSpan

-- | Converts a 'H.SrcLoc' by creating a zero width source span and applying
--   the conversion for 'H.SrcSpan's.
instance SrcSpanConverter H.SrcLoc where
  convertSrcSpan codeByFilename = convertSrcSpan codeByFilename . join H.mkSrcSpan

-------------------------------------------------------------------------------
-- Reporter monad                                                            --
-------------------------------------------------------------------------------

-- | A data structure that contains the messages reported by the compiler
--   and an optional value that is present only if the compiler did not
--   encounter a fatal error.
--
--   The message lists are in reverse order, i.e. the last reported
--   message comes first. In case of 'Fatal' that mesan that the head
--   of the message list contains the reason for the failure.
data Reporter a =
  Report [Message] a
  | Fatal [Message]

-- | Functor instance for 'Reporter's to allow creation of the
--   'Applicative' instance.
instance Functor Reporter where
  fmap = liftM

-- | Applicative instance for 'Reporter's to allow creation of the
--   'Monad' instance.
instance Applicative Reporter where
  pure = return
  (<*>) = ap

-- | Monad instance for 'Reporter's.
--
--   When two reporters are executed in sequence, the resulting reporter
--   reports all messages of both reporters. The messages reported by the
--   second reporter will occur before.
--
--   When a reporter encounters a fatal error, no subsequent reporters are
--   executed.
instance Monad Reporter where
  return = Report []
  (>>=) (Report ms x) f = addMessages (f x) ms
  (>>=) (Fatal ms) _ = Fatal ms

-------------------------------------------------------------------------------
-- Reporting messages                                                        --
-------------------------------------------------------------------------------

-- | Appends a list of messages to the messages reported by the given reporter.
--
--   The new messages are added to the back of the message list.
addMessages :: Reporter a -> [Message] -> Reporter a
addMessages (Report ms x) ms' = Report (ms ++ ms') x
addMessages (Fatal ms   ) ms' = Fatal (ms ++ ms')

-- | Creates a successful reporter that reports the given message.
report :: Message -> Reporter ()
report msg = Report [msg] ()

-- | Creates a reporter that fails with the given message.
reportFatal :: Message -> Reporter a
reportFatal msg = Fatal [msg]

-- | Creates an IO action for a reporter that reports all IO errors that
--   that occur during the given IO action.
--
--   All IO errors are considered fatal and have no location information.
reportIOErrors :: IO (Reporter a) -> IO (Reporter a)
reportIOErrors action = catchIOError action (return . reportIOError)

-- | Reports the given IO error as a fatal error with no location information.
reportIOError :: IOError -> Reporter a
reportIOError = reportFatal . Message Nothing Error . ioErrorMessageText
 where
  ioErrorMessageText :: IOError -> String
  ioErrorMessageText err =
    ioeGetErrorString err ++ maybe "" (": " ++) (ioeGetFileName err)

-------------------------------------------------------------------------------
-- Handling messages and reporter results                                    --
-------------------------------------------------------------------------------

-- | Tests whether a fatal error was reported to the given reporter.
isFatal :: Reporter a -> Bool
isFatal (Report _ _) = False
isFatal (Fatal _   ) = True

-- | Gets the messages reported to the given reporter.
--
--   Because the reporter stores messages in reverse order (i.e. the head of
--   the stored list is the latest message) this function reverses the message
--   list such taht it is in the right order again (i.e. the head of the
--   returned list is the first message).
messages :: Reporter a -> [Message]
messages (Report ms _) = reverse ms
messages (Fatal ms   ) = reverse ms

-- | Handles the result of a reporter by invoking the given function or
--   returning the provided default value depending on whether a fatal
--   error was reported or not.
foldReporter
  :: Reporter a
  -> (a -> b)  -- ^ The function to apply if no fatal error was encountered.
  -> b         -- ^ The value to return if a fatal error was encountered.
  -> b
foldReporter (Report _ x) f _ = f x
foldReporter (Fatal _   ) _ v = v

-------------------------------------------------------------------------------
-- Pretty printing messages                                                  --
-------------------------------------------------------------------------------

-- | Pretty instance for message severity levels.
instance Pretty Severity where
  pretty Error   = prettyString "error"
  pretty Warning = prettyString "warning"
  pretty Info    = prettyString "info"

-- | Pretty instance for a source span that displays the filename and the start
--   position of the source span.
instance Pretty SrcSpan where
  pretty srcSpan =
    prettyString (srcSpanFilename srcSpan)
      <> colon
      <> int (srcSpanStartLine srcSpan)
      <> colon
      <> int (srcSpanStartColumn srcSpan)

-- | Pretty instance for messages.
--
--   The format of the messages is based on the format used by GHC:
--
--   @
--   <file>:<line>:<column>: <severity>:
--       <message-contents>
--          |
--   <line> | <line of code ... culprit  ... >
--          |                   ^^^^^^^
--   @
--
--   If no location information is attached to the message, a place holder is
--   text displayed instead of the filename, and start position and no
--   code snippet will be shown.
--
--   Lists of messages are separated by a newline.
instance Pretty Message where
  pretty (Message maybeSrcSpan severity msg) =
    (prettyMaybe "<no location info>" maybeSrcSpan <> colon)
      <+>  (pretty severity <> colon)
      <$$> (indent 4 $ prettyText msg)
      <>   line
      <>   prettyCodeBlock maybeSrcSpan
  prettyList = prettySeparated line

-- | Creates a document that shows the line of code that caused a message to
--   be reported.
--
--   If the message contains no location information or no source code the
--   empty document is returned.
prettyCodeBlock :: Maybe SrcSpan -> Doc
prettyCodeBlock Nothing = empty
prettyCodeBlock (Just SrcSpan { srcSpanCodeLine = Nothing }) = empty
prettyCodeBlock (Just srcSpan@SrcSpan { srcSpanCodeLine = Just code }) =
  gutterDoc
    <$$> lineNumberDoc
    <+>  prettyString code
    <$$> gutterDoc
    <>   highlightDoc
    <>   line
 where
  -- | Document for the line number including padding and the trailing pipe.
  lineNumberDoc :: Doc
  lineNumberDoc = space <> int (srcSpanStartLine srcSpan) <> space <> pipe

  -- | Document with the same length as 'lineNumberDoc' but without the line
  --   number.
  gutterDoc :: Doc
  gutterDoc =
    let gutterWidth = length (show (srcSpanStartLine srcSpan)) + 2
    in  indent gutterWidth pipe

  -- | Document that contains 'caret' signs to highligh the source span.
  highlightDoc :: Doc
  highlightDoc = indent (srcSpanStartColumn srcSpan)
                        (hcat (replicate (srcSpanWidth srcSpan) caret))

  -- | Document that contains the pipe character @|@.
  pipe :: Doc
  pipe = char '|'

  -- | Document that contains the caret character @^@.
  caret :: Doc
  caret = char '^'
