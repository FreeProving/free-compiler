# We are using a Docker image that has GHC and Cabal preinstalled.
.haskell:
  image: haskell:8.6.5

# For some jobs we need a Docker image that has Coq preinstalled.
.coq:
  image: coqorg/coq:8.8.2

###############################################################################
# Dependencies                                                                #
###############################################################################

# We want to avoid recompiling dependencies on subsequent runs of the pipeline.
# Thus we save the Cabal directory to the GitLab CI cache. Because we cannot
# cache files outside of the repository, we need to explicitly move the cabal
# directory into our repository.

.cabal-cache:
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ./haskellToCoqCompiler/dist-newstyle
      - ./haskellToCoqCompiler/.cabal
  before_script:
    - mv ./haskellToCoqCompiler/.cabal /root/.cabal || true
    - echo "Building dependencies..."
    - cd haskellToCoqCompiler
    - cabal new-update
    - cabal new-build --only-dependencies
    - cd ..
  after_script:
    - mv /root/.cabal ./haskellToCoqCompiler/.cabal

###############################################################################
# Unit tests                                                                  #
###############################################################################

# Compile unit tests.
build-unit-tests:
  extends:
    - .haskell
    - .cabal-cache
  stage: build
  script:
    - echo "Building unit tests..."
    - cd haskellToCoqCompiler
    - cabal new-build unit-tests
    - echo "Copy unit test executable to build directory..."
    - mkdir -p ./build/bin
    - cp $(find dist-newstyle -name unit-tests -type f) ./build/bin/unit-tests
  artifacts:
    name: unit-tests
    paths:
      - ./haskellToCoqCompiler/build/bin/unit-tests

# Run unit tests.
run-unit-tests:
  extends: .haskell
  stage:  test
  dependencies:
    - build-unit-tests
  script:
    - echo "Running unit tests..."
    - cd haskellToCoqCompiler
    - ./build/bin/unit-tests

###############################################################################
# Executable                                                                  #
###############################################################################

# Compile Haskell to Coq compiler.
# TODO can we generate a statically linked executable?
build-compiler:
  extends:
    - .haskell
    - .cabal-cache
  stage: build
  script:
    - echo "Building compiler..."
    - cd haskellToCoqCompiler
    - cabal new-build haskell-to-coq-compiler
    - echo "Copy executable to build directory..."
    - mkdir -p ./build/bin
    - cp $(find dist-newstyle -name haskell-to-coq-compiler -type f) ./build/bin/haskell-to-coq-compiler
  artifacts:
    name: compiler
    paths:
      - ./haskellToCoqCompiler/build/bin/haskell-to-coq-compiler

###############################################################################
# Documentation                                                               #
###############################################################################

# Build Haddock documentation.
build-docs:
  extends:
    - .haskell
    - .cabal-cache
  stage: build
  script:
    - echo "Building Haddock documentation..."
    - cd haskellToCoqCompiler
    - cabal new-haddock --haddock-hyperlink-source
    - echo "Copy documentation to build directory..."
    - mkdir -p ./build/docs
    - cp -r $(dirname $(find dist-newstyle -name "index.html"))/. ./build/docs
  artifacts:
    name: docs
    paths:
      - ./haskellToCoqCompiler/build/docs

# Deploy documentation to `https://$SSH_DEPLOY_HOST/$CI_COMMIT_REF_SLUG/docs`.
deploy-docs:
  extends: .ssh-deploy
  stage: deploy
  dependencies:
    - build-docs
  script:
    - cp -r ./haskellToCoqCompiler/build/docs $DEPLOY_DIR

###############################################################################
# Base library                                                                #
###############################################################################

# Build the Coq Base library.
build-base-library:
  extends: .coq
  stage: build
  script:
    - cd haskellToCoqCompiler
    - ./tool/compile-coq.sh base
  artifacts:
    name: coq-base-library
    paths:
      - ./haskellToCoqCompiler/base/*.vo
      - ./haskellToCoqCompiler/base/*.glob

###############################################################################
# Examples                                                                    #
###############################################################################

# Tests the Haskell to Coq compiler with the example modules.
# The artifacts contain the generated `.v` files, the Coq Base library
# and the generated `_CoqProject` file for the Coq Base library.
build-examples:
  extends: .haskell
  stage: test
  dependencies:
    - build-compiler
  script:
    - cd haskellToCoqCompiler
    - mkdir -p ./build/example
    - cp -r base ./build/example
    - ./build/bin/haskell-to-coq-compiler -b ./build/example/base -o ./build/example $(find ./example -name "*.hs")
  artifacts:
    name: examples
    paths:
      - ./haskellToCoqCompiler/build/example

# Compiles the `.v` files for the examples generated by the compiler during
# the `build-examples` job.
test-examples:
  extends: .coq
  stage: test-2
  dependencies:
    - build-base-library
    - build-examples
  script:
    - cd haskellToCoqCompiler
    - ./tool/compile-coq.sh ./build/example
