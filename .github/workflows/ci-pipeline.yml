name: CI Pipeline

# The CI pipeline runs whenever a pull request that modifies the compiler's
# build configuration, source or example files is opened, synchronized (i.e.,
# updated due to a new push to the branch that is tracked by the pull request)
# or reopened. If just the README or documentation changes, the pipeline does
# not have to run. It also runs when the workflow configuration changed itself.
#
# When such a pull request is merged the resulting `push` event on the master
# branch triggers another run of the CI pipeline. This is necessary because
# there could be changes to the master branch that are not compatible with the
# pull request but don't prevent fast-forward merging.
# Furthermore, the documentation is deployed to GitHub pages during the second
# run of the CI pipeline.
on:
  pull_request:
    paths:
    - 'cabal.project'
    - 'free-compiler.cabal'
    - 'base/**'
    - 'example/**'
    - 'src/**'
    - '.github/workflows/ci-pipeline.yml'
  push:
    branches:
    - 'master'
    - 'dev-agda'
    paths:
    - 'cabal.project'
    - 'free-compiler.cabal'
    - 'base/**'
    - 'example/**'
    - 'src/**'
    - '.github/workflows/ci-pipeline.yml'

jobs:
  #############################################################################
  # Compilation                                                               #
  #############################################################################

  # Builds the compiler, unit tests and dependencies using Cabal.
  #
  # Compiled modules are cached for subsequent jobs or pipeline runs.
  # Unfortunately, the entire code of this job that handled the setup of
  # the cache (steps between `SETUP CACHE` and `END SETUP CACHE`) needs to
  # be replicated to restore the caches in all jobs that use Cabal.
  #
  # We cache `~/.cabal/packages`, `~/.cabal/store` and `dist-newstyle`
  # separately. The cache keys contain the hash of the `.cabal` and
  # `cabal.project` file as well as the hash of the `01-index.cache` file
  # from `~/.cabal/packages`.
  #
  #   * If the Cabal files in this repository change, a previous version
  #     of the cache is restored and the updated dependencies are installed.
  #     We assume this to happen only infrequently.
  #
  #   * Before the caches are populated, the latest Cabal package list is
  #     downloaded. Therefore, a change of `01-index.cache` occurs frequently.
  #     Whenever the package list is updated, a lot of dependencies have
  #     to be rebuild. If the hash of the index wouldn't be part of the
  #     cache keys, the rebuild would be triggered on every push until the
  #     Cabal files are changed. By including the indexes hash, the rebuilt
  #     dependencies are cached until the next change of the package list.
  #
  # The cache key for `dist-newsyle` additionally contains the hash of all
  # Haskell files in `src`. This avoids recompilation of modules defined in
  # this repository.
  #
  # We install dependencies on all supported platforms separately. The
  # operating system is part of the cache key. Caches are never restored
  # from other platforms.
  cabal-build:
    name: Cabal Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    ### SETUP CACHE ###########################################################
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
        echo "::set-output name=haskell-source-hash::$(cat $(find src -name '*.hs') | sha256sum | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-packages-
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}-${{ steps.cabal-update.outputs.haskell-source-hash }}
        restore-keys: |
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}-
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-dist-newstyle-
    ### END SETUP CACHE #######################################################

    # Build the package and dependencies.
    - name: Build compiler library dependencies
      run: cabal new-build freec-internal --dependencies-only
    - name: Build compiler library
      run: cabal new-build freec-internal

    - name: Build unit tests dependencies
      run: cabal new-build freec-unit-tests --dependencies-only
    - name: Build unit tests
      run: cabal new-build freec-unit-tests

    - name: Build command line interface dependencies
      run: cabal new-build freec --dependencies-only
    - name: Build command line interface
      run: cabal new-build freec

    # Upload the compiler executable artifact.
    # If there are cached builds of previous versions, the `find` command
    # without `-path` option would return all of the cached executables.
    # We are only interested in the executable for the version specified
    # the Cabal configuration file.
    - name: Copy executable to build directory
      run: |
        pkg_name="free-compiler"
        exe_name="freec"
        pkg_version=$(cat "$pkg_name.cabal" | grep -P '^version:' | awk '{print $2}')
        exe_path=$(find dist-newstyle -path "*/$pkg_name-$pkg_version/*" -name "$exe_name" -type f)
        mkdir -p ./build/bin
        cp "$exe_path" "./build/bin/$exe_name"
    - name: Upload executable
      uses: actions/upload-artifact@v1
      with:
        name: compiler-${{ matrix.os }}
        path: ./build/bin/freec

  #############################################################################
  # Unit tests                                                                #
  #############################################################################

  # Run the unit tests against all supported platforms.
  unit-tests:
    name: Unit tests
    needs: [cabal-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    ### SETUP CACHE ###########################################################
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
        echo "::set-output name=haskell-source-hash::$(cat $(find src -name '*.hs') | sha256sum | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-packages-
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}-${{ steps.cabal-update.outputs.haskell-source-hash }}
        restore-keys: |
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}-
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-dist-newstyle-
    ### END SETUP CACHE #######################################################
    - name: Build unit tests
      run: cabal new-build freec-unit-tests
    - name: Run unit tests
      run: cabal new-run freec-unit-tests

  #############################################################################
  # Documentation                                                             #
  #############################################################################

  # We build the documentation on Ubuntu only. The goal of this job besides the
  # generation of documentation for deployment is to test whether everything is
  # documented and the documentation can be built without a problem.
  build-docs:
    name: Build Haddock documentation
    needs: [cabal-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
    steps:
    ### SETUP CACHE ###########################################################
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup Haskell
      uses: actions/setup-haskell@v1
      with:
        ghc-version: '8.6.5'
        cabal-version: '2.4'
    - name: Update Cabal Package List
      id: cabal-update
      run: |
        cabal new-update
        echo "::set-output name=cabal-hash::$(cat cabal.project free-compiler.cabal | sha256sum | awk '{ print $1 }')"
        echo "::set-output name=cabal-index-hash::$(cat ~/.cabal/packages/**/01-index.cache | sha256sum -b | awk '{ print $1 }')"
        echo "::set-output name=haskell-source-hash::$(cat $(find src -name '*.hs') | sha256sum | awk '{ print $1 }')"
    - name: Cache ~/.cabal/packages
      uses: actions/cache@v1
      with:
        path: ~/.cabal/packages
        key: ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-packages-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-packages-
    - name: Cache ~/.cabal/store
      uses: actions/cache@v1
      with:
        path: ~/.cabal/store
        key: ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}
        restore-keys: |
          ${{ matrix.os }}-cabal-store-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-cabal-store-
    - name: Cache dist-newstyle
      uses: actions/cache@v1
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}-${{ steps.cabal-update.outputs.haskell-source-hash }}
        restore-keys: |
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-${{ steps.cabal-update.outputs.cabal-index-hash }}-
          ${{ matrix.os }}-dist-newstyle-${{ steps.cabal-update.outputs.cabal-hash }}-
          ${{ matrix.os }}-dist-newstyle-
    ### END SETUP CACHE #######################################################
    - name: Run Haddock
      run: ./tool/make-docs.sh
    - name: Copy documentation to build directory
      run: |
        pkg_name="free-compiler"
        pkg_version=$(cat "$pkg_name.cabal" | grep -P '^version:' | awk '{print $2}')
        doc_path=$(find dist-newstyle -path "*/$pkg_name-$pkg_version/*doc/html/$pkg_name" | awk '{print $0"/."}')
        mkdir -p ./build/docs
        cp -R $doc_path ./build/docs
    - name: Upload documentation
      uses: actions/upload-artifact@v1
      with:
        name: documentation
        path: ./build/docs

  # This job deploys the Haddock documentation generated by the `build-docs`
  # job to GitHub pages.
  #
  # This job requires a SSH deploy key for the repository. The following
  # command can be used to generate such a key.
  #
  #     ssh-keygen -t rsa -b 4096 -C "<email>" -N ""
  #
  #  - The **public key** must be given write access in the repositories deploy
  #    key menu under `Settings > Deploy Keys`.
  #
  #  - The **private key** must be added as a repository secret `DEPLOY_KEY` to
  #    the menu under `Settings > Secrets`.
  #
  # This job will be skipped if the `DEPLOY_KEY` secret is missing.
  # Therefore, it is not necessary to setup deployment to GitHub pages
  # when forking the repository.
  #
  # This job only runs on `push` events and not on `pull_request` events.
  # This limits the deployment effectively to the master branch (and maybe
  # tags in the future).
  #
  # **NEVER** commit the contents of the private key!
  deploy-docs:
    name: Deploy Haddock documentation to GitHub pages
    needs: [build-docs]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    env:
      # We cannot access `secrets` in `jobs.<job_id>.steps.if` directly and
      # `env` is not allowed on `jobs.<job_id>.if`.
      HAS_DEPLOY_KEY: ${{ secrets.DEPLOY_KEY != '' }}
    steps:
    - # The checkout is required by the deployment action below.
      if:   ${{ env.HAS_DEPLOY_KEY == 'true' }}
      name: Checkout
      uses: actions/checkout@v1
    - if:   ${{ env.HAS_DEPLOY_KEY == 'true' }}
      name: Install SSH Client
      uses: webfactory/ssh-agent@v0.2.0
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}
    - if: ${{ env.HAS_DEPLOY_KEY == 'true' }}
      name: Slug branch name
      run: ./.github/scripts/slug.sh "$GITHUB_REF" "GITHUB_REF_SLUG"
    - if:   ${{ env.HAS_DEPLOY_KEY == 'true' }}
      name: Download documentation
      uses: actions/download-artifact@v1
      with:
        name: documentation
        path: ./build/docs
    - if:   ${{ env.HAS_DEPLOY_KEY == 'true' }}
      name: Deploy to GitHub pages
      uses: JamesIves/github-pages-deploy-action@releases/v3
      with:
        SSH: true
        CLEAN: true
        BRANCH: gh-pages
        FOLDER: build/docs
        TARGET_FOLDER: docs/${{ env.GITHUB_REF_SLUG }}

  #############################################################################
  # Base library                                                              #
  #############################################################################

  # Build the base library of the compiler with all supported Coq versions.
  # We are using Ubuntu and a Debian based Coq docker image in this Job.
  build-base-library:
    name: Build Coq base library
    runs-on: ubuntu-latest
    container: coqorg/coq:${{ matrix.coq }}
    strategy:
      matrix:
        coq: ["8.8", "8.9", "8.10", "8.11"]
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Fix file permissions
      run: sudo chown -R coq:coq .
    - name: Setup Coq
      run: echo "::add-path::/home/coq/.opam/$COMPILER/bin"
    - name: Build Coq base library
      run: ./tool/compile-coq.sh base/coq
    - name: Copy compiled base library to build directory
      run: |
        mkdir -p ./build/base/coq
        cp --parents $(find base -name "*.vo" -or -name "*.glob") ./build/coq
    - name: Upload compiled base library for Coq ${{ matrix.coq }}
      uses: actions/upload-artifact@v1
      with:
        name: coq-${{ matrix.coq }}-base-library
        path: ./build/base/coq

  #############################################################################
  # Examples                                                                  #
  #############################################################################

  # Uses the compiler build by `cabal-build` to compile example Haskell
  # programs located in the `./example` directory.
  test-examples:
    name: Test examples
    needs: [cabal-build]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"] # "macos-latest", "windows-latest"
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Download compiler
      uses: actions/download-artifact@v1
      with:
        name: compiler-${{ matrix.os }}
        path: ./
    - name: Mark compiler as executable
      run: chmod +x freec
    - name: Compile examples
      run: |
        ./freec                                          \
          --transform-pattern-matching                   \
          --dump-transformed-modules example/transformed \
          -b ./base/coq                                  \
          -o ./example/generated                         \
          $(find ./example -name "*.hs")
    - name: Copy compiled examples to build directory
      run: |
        mkdir -p ./build/examples
        cp -R ./example/generated ./build/examples
        cp -R ./example/transformed ./build/examples
    - name: Upload compiled examples
      uses: actions/upload-artifact@v1
      with:
        name: examples
        path: ./build/examples

  # Tests whether Coq accepts the code generated by the compiler for the
  # examples in `test-examples`.
  # We are using Ubuntu and a Debian based Coq docker image in this Job.
  test-generated-code:
    name: Test generated Coq code
    needs: [test-examples, build-base-library]
    runs-on: ubuntu-latest
    container: coqorg/coq:${{ matrix.coq }}
    strategy:
      matrix:
        coq: ["8.8", "8.9", "8.10", "8.11"]
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Download base library for Coq ${{ matrix.coq }}
      uses: actions/download-artifact@v1
      with:
        name: coq-${{ matrix.coq }}-base-library
        path: ./base/coq
    - name: Download compiled examples
      uses: actions/download-artifact@v1
      with:
        name: examples
        path: ./example
    - name: Fix file permissions
      run: sudo chown -R coq:coq .
    - name: Setup Coq
      run: echo "::add-path::/home/coq/.opam/$COMPILER/bin"
    - name: Compile (generated) Coq code
      run: ./tool/compile-coq.sh ./example

  #############################################################################
  # Code style                                                                #
  #############################################################################

  # All HLint suggestions should be followed or explicitly ignored
  # in `.hlint.yaml`.
  hlint:
    name: Run HLint
    runs-on: ubuntu-latest
    container: just95/hlint:3.1.1
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Check code style using HLint
      run: hlint src

  # All Haskell source files should be formatted using Brittany.
  brittany:
    name: Run Brittany
    runs-on: ubuntu-latest
    container: just95/brittany:0.12.1.1
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Check code style using Brittany
      run: ./tool/check-formatting.sh
