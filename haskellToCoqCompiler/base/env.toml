# This configuration file contains the names of predefined types, constructors
# and functions from the Coq Base library and the corresponding Haskell names
# and types.

##############################################################################
# Bool                                                                       #
##############################################################################

[[types]]
  haskell-name = "Bool"
  coq-name     = "Bool"
  arity        = 0

# Alias for `Bool` that cannot be shadowed.
[[types]]
  haskell-name = "Prelude.Bool"
  coq-name     = "Bool"
  arity        = 0

[[constructors]]
  haskell-type   = "Bool"
  haskell-name   = "True"
  coq-name       = "true"
  coq-smart-name = "True_"
  arity          = 0

# Alias for `True` that cannot be shadowed.
[[constructors]]
  haskell-type   = "Bool"
  haskell-name   = "Prelude.True"
  coq-name       = "true"
  coq-smart-name = "True_"
  arity          = 0

[[constructors]]
  haskell-type   = "Bool"
  haskell-name   = "False"
  coq-name       = "false"
  coq-smart-name = "False_"
  arity          = 0

[[functions]]
  arity        = 2
  haskell-type = "Bool -> Bool -> Bool"
  haskell-name = "&&"
  coq-name     = "andBool"

[[functions]]
  haskell-type = "Bool -> Bool -> Bool"
  haskell-name = "||"
  coq-name     = "orBool"
  arity        = 2

##############################################################################
# Int                                                                        #
##############################################################################

[[types]]
  haskell-name = "Int"
  coq-name     = "Int"
  arity        = 0

[[functions]]
  haskell-type = "Int -> Int -> Int"
  haskell-name = "+"
  coq-name     = "addInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Int"
  haskell-name = "-"
  coq-name     = "subInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Int"
  haskell-name = "*"
  coq-name     = "mulInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Int"
  haskell-name = "^"
  coq-name     = "powInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Bool"
  haskell-name = "<="
  coq-name     = "leInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Bool"
  haskell-name = "<"
  coq-name     = "ltInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Bool"
  haskell-name = "=="
  coq-name     = "eqInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Bool"
  haskell-name = "/="
  coq-name     = "neqInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Bool"
  haskell-name = ">="
  coq-name     = "geInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Bool"
  haskell-name = ">"
  coq-name     = "gtInt"
  arity        = 2

[[functions]]
  haskell-type = "Int -> Int -> Int"
  haskell-name = "negate"
  coq-name     = "negate"
  arity        = 1

# Alias for `negate`, that cannot be shadowed.
[[functions]]
  haskell-type = "Int -> Int -> Int"
  haskell-name = "Prelude.negate"
  coq-name     = "negate"
  arity        = 1

##############################################################################
# Lists                                                                      #
##############################################################################

[[types]]
  haskell-name = "[]"
  coq-name     = "List"
  arity = 1

[[constructors]]
  haskell-type   = "[a]"
  haskell-name   = "[]"
  coq-name       = "nil"
  coq-smart-name = "Nil"
  arity          = 0

[[constructors]]
  haskell-type   = "a -> [a] -> [a]"
  haskell-name   = ":"
  coq-name       = "cons"
  coq-smart-name = "Cons"
  arity          = 2

##############################################################################
# Pairs                                                                      #
##############################################################################

[[types]]
  haskell-name = "(,)"
  coq-name     = "Pair"
  arity        = 2

[[constructors]]
  haskell-type   = "a -> b -> (a, b)"
  haskell-name   = "(,)"
  coq-name       = "pair_"
  coq-smart-name = "Pair_"
  arity          = 2

##############################################################################
# Unit                                                                       #
##############################################################################

[[types]]
  haskell-name = "()"
  coq-name     = "Unit"
  arity        = 0

[[constructors]]
  haskell-type   = "()"
  haskell-name   = "()"
  coq-name       = "tt"
  coq-smart-name = "Tt"
  arity          = 0
